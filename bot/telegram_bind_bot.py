import os
import sys
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.error import TimedOut, NetworkError, TelegramError

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import database as db
import secrets
from database import get_telegram_link_code, delete_telegram_link_code, get_user_by_telegram_id, create_telegram_login_token
from config import TELEGRAM_BIND_BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='telegram_bind_bot.log'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
EMOJI = {
    'welcome': 'üëã',
    'success': '‚úÖ',
    'error': '‚ùå',
    'warning': '‚ö†Ô∏è',
    'info': '‚ÑπÔ∏è',
    'link': 'üîó',
    'key': 'üîë',
    'user': 'üë§',
    'settings': '‚öôÔ∏è',
    'help': '‚ùì',
    'logout': 'üö™'
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –ø—Ä–∏–≤—è–∑–∫–∏
binding_codes = {}

def generate_binding_code(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    code = secrets.token_hex(3)  # 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    binding_codes[code] = user_id
    return code

async def send_login_code(telegram_id, code):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Telegram"""
    bot = Bot(token=TELEGRAM_BIND_BOT_TOKEN)
    try:
        await bot.send_message(chat_id=telegram_id, text=f"–í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Ñ–æ—Ä—É–º: <code>{code}</code>", parse_mode="HTML")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –≤—Ö–æ–¥–∞: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    existing_user = db.get_user_by_telegram_id(user.id)
    
    if existing_user:
        keyboard = [
            [InlineKeyboardButton(f"{EMOJI['link']} –í–æ–π—Ç–∏ –Ω–∞ —Ñ–æ—Ä—É–º", callback_data='login')],
            [InlineKeyboardButton(f"{EMOJI['settings']} –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='unbind')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"{EMOJI['welcome']} –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            f"{EMOJI['user']} –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–æ—Ä—É–º—É.\n"
            f"{EMOJI['info']} –õ–æ–≥–∏–Ω –Ω–∞ —Ñ–æ—Ä—É–º–µ: {existing_user['username']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        keyboard = [
            [InlineKeyboardButton(f"{EMOJI['help']} –ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç?", callback_data='help_bind')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"{EMOJI['welcome']} –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            f"{EMOJI['info']} –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram –∫ —Ñ–æ—Ä—É–º—É.\n\n"
            f"{EMOJI['key']} –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
            "1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Ñ–æ—Ä—É–º–µ\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
            "3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'\n"
            "4. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /bind <–∫–æ–¥>\n\n"
            "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )

async def bind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bind"""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /bind –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username})")
    
    if not context.args:
        keyboard = [
            [InlineKeyboardButton(f"{EMOJI['help']} –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥?", callback_data='help_code')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"{EMOJI['warning']} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏.\n"
            f"{EMOJI['info']} –ü—Ä–∏–º–µ—Ä: /bind 123456\n\n"
            "–ù–µ –∑–Ω–∞–µ—Ç–µ, –≥–¥–µ –≤–∑—è—Ç—å –∫–æ–¥? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        return

    code = context.args[0]
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Å –∫–æ–¥–æ–º: {code}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
        existing_user = db.get_user_by_telegram_id(user.id)
        if existing_user:
            keyboard = [
                [InlineKeyboardButton(f"{EMOJI['link']} –í–æ–π—Ç–∏ –Ω–∞ —Ñ–æ—Ä—É–º", callback_data='login')],
                [InlineKeyboardButton(f"{EMOJI['settings']} –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='unbind')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"{EMOJI['info']} –í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–æ—Ä—É–º—É.\n\n"
                f"{EMOJI['user']} –õ–æ–≥–∏–Ω –Ω–∞ —Ñ–æ—Ä—É–º–µ: {existing_user['username']}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ —á–µ—Ä–µ–∑ –±–∞–∑—É
        code_row = db.get_telegram_link_code(code)
        if not code_row:
            await update.message.reply_text(
                f"{EMOJI['error']} –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏.\n\n"
                f"{EMOJI['warning']} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return

        user_id = code_row['user_id']
        logger.info(f"–ö–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        forum_user = db.get_user_by_id(user_id)
        if not forum_user:
            await update.message.reply_text(
                f"{EMOJI['error']} –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ä—É–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
            return

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram {user.id} –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ–æ—Ä—É–º–∞ {user_id}")
        if db.bind_telegram_account(user_id, user.id, user.username):
            db.delete_telegram_link_code(code)  # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            keyboard = [
                [InlineKeyboardButton(f"{EMOJI['link']} –í–æ–π—Ç–∏ –Ω–∞ —Ñ–æ—Ä—É–º", callback_data='login')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"{EMOJI['success']} –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–æ—Ä—É–º—É.\n\n"
                f"{EMOJI['user']} –õ–æ–≥–∏–Ω –Ω–∞ —Ñ–æ—Ä—É–º–µ: {forum_user['username']}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –Ω–∞ —Ñ–æ—Ä—É–º:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"{EMOJI['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
                f"{EMOJI['warning']} –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
            )
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text(
            f"{EMOJI['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
            f"{EMOJI['info']} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def unbind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unbind"""
    user = update.effective_user
    binding = db.get_telegram_binding_by_user_id(user.id)
    
    if not binding:
        keyboard = [
            [InlineKeyboardButton(f"{EMOJI['help']} –ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç?", callback_data='help_bind')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"{EMOJI['warning']} –í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ñ–æ—Ä—É–º—É.\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        return

    keyboard = [
        [InlineKeyboardButton(f"{EMOJI['success']} –î–∞, –æ—Ç–≤—è–∑–∞—Ç—å", callback_data='confirm_unbind')],
        [InlineKeyboardButton(f"{EMOJI['error']} –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='cancel_unbind')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"{EMOJI['warning']} –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Telegram –æ—Ç —Ñ–æ—Ä—É–º–∞?\n\n"
        f"{EMOJI['info']} –ü–æ—Å–ª–µ –æ—Ç–≤—è–∑–∫–∏ –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram.",
        reply_markup=reply_markup
    )

async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /login"""
    user = update.effective_user
    forum_user = get_user_by_telegram_id(user.id)
    
    if not forum_user:
        keyboard = [
            [InlineKeyboardButton(f"{EMOJI['help']} –ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç?", callback_data='help_bind')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"{EMOJI['warning']} –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É —Ñ–æ—Ä—É–º–∞.\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        return
        
    token = create_telegram_login_token(forum_user['id'])
    site_url = os.getenv('SITE_URL', 'http://localhost:5000')
    login_link = f"{site_url}/login_telegram?token={token}"
    
    keyboard = [
        [InlineKeyboardButton(f"{EMOJI['link']} –í–æ–π—Ç–∏ –Ω–∞ —Ñ–æ—Ä—É–º", url=login_link)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"{EMOJI['info']} –î–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Ñ–æ—Ä—É–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n\n"
        f"{EMOJI['warning']} –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 5 –º–∏–Ω—É—Ç.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Ö–æ–¥–∞:",
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'login':
        await login_command(update, context)
    elif query.data == 'unbind':
        await unbind(update, context)
    elif query.data == 'help_bind':
        await query.message.reply_text(
            f"{EMOJI['info']} –ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç Telegram –∫ —Ñ–æ—Ä—É–º—É:\n\n"
            "1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Ñ–æ—Ä—É–º–µ\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
            "3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'\n"
            "4. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /bind <–∫–æ–¥>"
        )
    elif query.data == 'help_code':
        await query.message.reply_text(
            f"{EMOJI['info']} –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏:\n\n"
            "1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Ñ–æ—Ä—É–º–µ\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n"
            "3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram'\n"
            "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
        )
    elif query.data == 'confirm_unbind':
        user = update.effective_user
        if db.unbind_telegram_account(user.id):
            keyboard = [
                [InlineKeyboardButton(f"{EMOJI['help']} –ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç?", callback_data='help_bind')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.edit_text(
                f"{EMOJI['success']} –í–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç —Ñ–æ—Ä—É–º–∞.\n\n"
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å–Ω–æ–≤–∞? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=reply_markup
            )
        else:
            await query.message.edit_text(
                f"{EMOJI['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
                f"{EMOJI['info']} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    elif query.data == 'cancel_unbind':
        keyboard = [
            [InlineKeyboardButton(f"{EMOJI['link']} –í–æ–π—Ç–∏ –Ω–∞ —Ñ–æ—Ä—É–º", callback_data='login')],
            [InlineKeyboardButton(f"{EMOJI['settings']} –û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='unbind')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            f"{EMOJI['info']} –û—Ç–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

async def send_moderation_notification(telegram_id, topic_title, status, comment=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã –≤ Telegram"""
    bot = Bot(token=TELEGRAM_BIND_BOT_TOKEN)
    max_retries = 3
    retry_delay = 5  # —Å–µ–∫—É–Ω–¥
    
    for attempt in range(max_retries):
        try:
            if status == 'approved':
                message = f'{EMOJI["success"]} –í–∞—à–∞ —Ç–µ–º–∞ "{topic_title}" –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.'
            else:
                message = f'{EMOJI["error"]} –í–∞—à–∞ —Ç–µ–º–∞ "{topic_title}" –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.'
                if comment:
                    message += f'\n\n{EMOJI["info"]} –ü—Ä–∏—á–∏–Ω–∞: {comment}'
            
            await bot.send_message(telegram_id, message)
            break
        except (TimedOut, NetworkError) as e:
            if attempt == max_retries - 1:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
            else:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫: {e}")
                await asyncio.sleep(retry_delay)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            break
        finally:
            await bot.session.close()

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_BIND_BOT_TOKEN:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config.py")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    application = (
        Application.builder()
        .token(TELEGRAM_BIND_BOT_TOKEN)
        .connect_timeout(30.0)
        .read_timeout(30.0)
        .write_timeout(30.0)
        .pool_timeout(30.0)
        .build()
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("bind", bind))
    application.add_handler(CommandHandler("unbind", unbind))
    application.add_handler(CommandHandler("login", login_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    while True:
        try:
            application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True,
                close_loop=False
            )
        except (TimedOut, NetworkError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            asyncio.sleep(5)
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            break

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                f"{EMOJI['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
                f"{EMOJI['info']} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

if __name__ == '__main__':
    main() 