import os
import sys
import asyncio
import logging
import json
import uuid
from datetime import datetime
from typing import Optional, Dict, Any, List, Union
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command, StateFilter
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramAPIError, TelegramNetworkError
from aiogram.client.default import DefaultBotProperties

import database as db
from config import TELEGRAM_MAIN_BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log',
    encoding='utf-8'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
UPLOAD_FOLDER = Path('uploads')
MIN_TITLE_LENGTH = 3
MIN_TEXT_LENGTH = 10
MAX_RETRIES = 3
RETRY_DELAY = 5

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=TELEGRAM_MAIN_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode='HTML')
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TopicStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_text = State()
    waiting_for_attachments = State()

class TopicManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏"""
    
    @staticmethod
    async def create_topic_directory(topic_id: str) -> Optional[Path]:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ–º—ã"""
        try:
            topic_dir = UPLOAD_FOLDER / f"topic_{topic_id}"
            topic_dir.mkdir(parents=True, exist_ok=True)
            return topic_dir
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–º—ã: {e}")
            return None

    @staticmethod
    async def save_topic_data(topic_dir: Path, data: Dict[str, Any]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –≤ JSON —Ñ–∞–π–ª"""
        try:
            topic_file = topic_dir / "topic.json"
            topic_file.write_text(
                json.dumps(data, ensure_ascii=False, indent=2),
                encoding='utf-8'
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–º—ã: {e}")
            return False

    @staticmethod
    async def save_attachment(bot: Bot, topic_dir: Path, attachment: Dict[str, Any], index: int) -> Optional[Dict[str, Any]]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–º—ã"""
        try:
            file_info = await bot.get_file(attachment['file_id'])
            if attachment['type'] == 'document':
                file_name = attachment['file_name']
            else:
                file_name = f"photo_{index}.jpg"
            
            file_path = topic_dir / file_name
            await bot.download_file(file_info.file_path, file_path)
            
            return {
                'type': attachment['type'],
                'file_name': file_name,
                'file_size': file_path.stat().st_size
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–ª–æ–∂–µ–Ω–∏—è: {e}")
            return None

class MessageManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    
    @staticmethod
    async def send_message(chat_id: int, text: str, **kwargs) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(MAX_RETRIES):
            try:
                await bot.send_message(chat_id=chat_id, text=text, **kwargs)
                return True
            except (TelegramNetworkError, TelegramAPIError) as e:
                if attempt == MAX_RETRIES - 1:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                else:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {RETRY_DELAY} —Å–µ–∫: {e}")
                    await asyncio.sleep(RETRY_DELAY)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                break
        return False

class UserManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    @staticmethod
    def check_user_access(user_id: int) -> tuple[bool, Optional[Dict[str, Any]]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º Telegram"""
        try:
            user = db.get_user_by_telegram_id(user_id)
            if not user or user['role'] != 'teacher':
                return False, None
            return True, user
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False, None

    @staticmethod
    def get_user_direction(user_id: int) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            directions = db.get_user_directions_by_user_id(user_id)
            return directions[0] if directions else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        has_access, user = UserManager.check_user_access(message.from_user.id)
        if not has_access:
            await message.answer("‚ùå –£–ø—Å. –ö–∞–∂–µ—Ç—Å—è –≤–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "üìù /topic ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É\n"
            "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏\n"
            "‚ùì /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:\n\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/topic ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã:\n"
        "1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)\n"
        "2. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "3. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n\n"
        "–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã –∫–æ–º–∞–Ω–¥–æ–π /cancel"
    )
    await MessageManager.send_message(message.chat.id, help_text)

@router.message(Command("topic"))
async def cmd_topic(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã"""
    try:
        has_access, user = UserManager.check_user_access(message.from_user.id)
        if not has_access:
            await MessageManager.send_message(
                message.chat.id,
                "‚ùå –£–ø—Å. –ö–∞–∂–µ—Ç—Å—è –≤–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        if current_state:
            logger.info(f"–°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            await state.clear()

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã")
        await MessageManager.send_message(
            message.chat.id,
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞):\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
        )
        
        await state.set_state(TopicStates.waiting_for_title)
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_title –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã: {e}", exc_info=True)
        await MessageManager.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.message(Command("cancel"), StateFilter(TopicStates.waiting_for_title, TopicStates.waiting_for_text, TopicStates.waiting_for_attachments))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã"""
    try:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã")
        await state.clear()
        await MessageManager.send_message(message.chat.id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã: {e}", exc_info=True)
        await MessageManager.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã."
        )

@router.message(TopicStates.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã"""
    try:
        if not message.text or len(message.text.strip()) < MIN_TITLE_LENGTH:
            await MessageManager.send_message(
                message.chat.id,
                f"‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º {MIN_TITLE_LENGTH} —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        title = message.text.strip()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã: {title}")
        
        await state.update_data(title=title)
        data = await state.get_data()
        
        if not data.get('title'):
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            await MessageManager.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        await MessageManager.send_message(
            message.chat.id,
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {title}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç–µ–º—ã (–º–∏–Ω–∏–º—É–º {MIN_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        
        await state.set_state(TopicStates.waiting_for_text)
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_text –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã: {e}", exc_info=True)
        await MessageManager.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()

@router.message(TopicStates.waiting_for_text)
async def process_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ç–µ–º—ã"""
    try:
        if not message.text or len(message.text.strip()) < MIN_TEXT_LENGTH:
            await MessageManager.send_message(
                message.chat.id,
                f"‚ùå –¢–µ–∫—Å—Ç —Ç–µ–º—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º {MIN_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        text = message.text.strip()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç —Ç–µ–º—ã")
        
        await state.update_data(text=text)
        data = await state.get_data()
        
        if not data.get('text'):
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            await MessageManager.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        await MessageManager.send_message(
            message.chat.id,
            "‚úÖ –¢–µ–∫—Å—Ç —Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö)\n"
            "–∏–ª–∏\n"
            "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )
        
        await state.set_state(TopicStates.waiting_for_attachments)
        await state.update_data(attachments=[])
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_attachments –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞ —Ç–µ–º—ã: {e}", exc_info=True)
        await MessageManager.send_message(
            message.chat.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()

@router.message(TopicStates.waiting_for_attachments, F.content_type.in_({'document', 'photo'}))
async def process_attachment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π —Ç–µ–º—ã"""
    try:
        data = await state.get_data()
        attachments = data.get('attachments', [])
        
        if message.document:
            attachments.append({
                'type': 'document',
                'file_id': message.document.file_id,
                'file_name': message.document.file_name
            })
        elif message.photo:
            photo = message.photo[-1]
            attachments.append({
                'type': 'photo',
                'file_id': photo.file_id
            })
            
        await state.update_data(attachments=attachments)
        await MessageManager.send_message(
            message.chat.id,
            f"‚úÖ –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω. –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(attachments)}\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–ª–æ–∂–µ–Ω–∏—è: {e}", exc_info=True)
        await MessageManager.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )

@router.message(Command("done"), TopicStates.waiting_for_attachments)
async def cmd_done(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã"""
    try:
        has_access, user = UserManager.check_user_access(message.from_user.id)
        if not has_access:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
        data = await state.get_data()
        if not data.get('title') or not data.get('text'):
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–µ–º—ã.")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        direction = UserManager.get_user_direction(user['id'])
        if not direction:
            logger.error(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = db.get_db_connection()
        c = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–º—ã –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            c.execute('''
                SELECT COALESCE(MAX(number), 0) + 1
                FROM topics
                WHERE direction = ?
            ''', (direction,))
            next_number = c.fetchone()[0]

            # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É
            c.execute('''
                INSERT INTO topics (number, title, text, direction, user_id, status)
                VALUES (?, ?, ?, ?, ?, 'pending')
            ''', (next_number, data['title'], data['text'], direction, user['id']))
            topic_id = c.lastrowid

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
            attachments = data.get('attachments', [])
            if attachments:
                topic_dir = await TopicManager.create_topic_directory(str(topic_id))
                if topic_dir:
                    logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ {len(attachments)} –≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–º—ã {topic_id}")
                    for idx, att in enumerate(attachments):
                        saved_attachment = await TopicManager.save_attachment(bot, topic_dir, att, idx)
                        if not saved_attachment:
                            await message.answer(
                                f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ {idx + 1}. –¢–µ–º–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ –Ω–µ–≥–æ."
                            )

            conn.commit()
            logger.info(f"–¢–µ–º–∞ {topic_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            await message.answer(
                "‚úÖ –í–∞—à–∞ —Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
                f"üìé –í–ª–æ–∂–µ–Ω–∏–π: {len(attachments)}\n\n"
                "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —Ç–µ–º–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Ñ–æ—Ä—É–º–µ."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã: {e}")
            conn.rollback()
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            conn.close()

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–º—ã: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(F.content_type == 'document')
async def handle_file(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    try:
        has_access, user = UserManager.check_user_access(message.from_user.id)
        if not has_access:
            await MessageManager.send_message(
                message.chat.id,
                "‚ùå –£–ø—Å. –ö–∞–∂–µ—Ç—Å—è –≤–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        direction = UserManager.get_user_direction(user['id'])
        if not direction:
            await MessageManager.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ñ–∞–π–ª–∞
        file_id = str(uuid.uuid4())[:8]
        file_dir = UPLOAD_FOLDER / f"file_{file_id}"
        file_dir.mkdir(parents=True, exist_ok=True)

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(message.document.file_id)
        file_path = file_dir / message.document.file_name
        await bot.download_file(file_info.file_path, file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
        file_data = {
            "user_id": message.from_user.id,
            "username": user['username'],
            "direction": direction,
            "status": "pending",
            "file_name": message.document.file_name,
            "file_size": file_path.stat().st_size,
            "created_at": datetime.now().isoformat()
        }

        (file_dir / "file.json").write_text(
            json.dumps(file_data, ensure_ascii=False, indent=2),
            encoding='utf-8'
        )

        await MessageManager.send_message(
            message.chat.id,
            "‚úÖ –í–∞—à —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\n"
            f"üìÅ –§–∞–π–ª: {message.document.file_name}\n"
            "–ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Ñ–æ—Ä—É–º–µ."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)
        await MessageManager.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    UPLOAD_FOLDER.mkdir(parents=True, exist_ok=True)

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await bot.session.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

if __name__ == '__main__':
    asyncio.run(main())